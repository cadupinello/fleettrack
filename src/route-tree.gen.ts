/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AuthLayoutRouteImport } from './pages/_auth/layout'
import { Route as AppLayoutRouteImport } from './pages/_app/layout'
import { Route as IndexRouteImport } from './pages/index'
import { Route as AuthSignUpRouteImport } from './pages/_auth/sign-up'
import { Route as AuthSignInRouteImport } from './pages/_auth/sign-in'
import { Route as AppMapsRouteImport } from './pages/_app/maps'
import { Route as AppDriversRouteImport } from './pages/_app/drivers'
import { Route as AppDashboardRouteImport } from './pages/_app/dashboard'
import { Route as AppSettingsProfileUserIdRouteImport } from './pages/_app/settings/profile.$userId'

const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AppMapsRoute = AppMapsRouteImport.update({
  id: '/maps',
  path: '/maps',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppDriversRoute = AppDriversRouteImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppSettingsProfileUserIdRoute =
  AppSettingsProfileUserIdRouteImport.update({
    id: '/settings/profile/$userId',
    path: '/settings/profile/$userId',
    getParentRoute: () => AppLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AppDashboardRoute
  '/drivers': typeof AppDriversRoute
  '/maps': typeof AppMapsRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/settings/profile/$userId': typeof AppSettingsProfileUserIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof AppDashboardRoute
  '/drivers': typeof AppDriversRoute
  '/maps': typeof AppMapsRoute
  '/sign-in': typeof AuthSignInRoute
  '/sign-up': typeof AuthSignUpRoute
  '/settings/profile/$userId': typeof AppSettingsProfileUserIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppLayoutRouteWithChildren
  '/_auth': typeof AuthLayoutRouteWithChildren
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/drivers': typeof AppDriversRoute
  '/_app/maps': typeof AppMapsRoute
  '/_auth/sign-in': typeof AuthSignInRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_app/settings/profile/$userId': typeof AppSettingsProfileUserIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/drivers'
    | '/maps'
    | '/sign-in'
    | '/sign-up'
    | '/settings/profile/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/drivers'
    | '/maps'
    | '/sign-in'
    | '/sign-up'
    | '/settings/profile/$userId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/_auth'
    | '/_app/dashboard'
    | '/_app/drivers'
    | '/_app/maps'
    | '/_auth/sign-in'
    | '/_auth/sign-up'
    | '/_app/settings/profile/$userId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_auth/sign-in': {
      id: '/_auth/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/_app/maps': {
      id: '/_app/maps'
      path: '/maps'
      fullPath: '/maps'
      preLoaderRoute: typeof AppMapsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/drivers': {
      id: '/_app/drivers'
      path: '/drivers'
      fullPath: '/drivers'
      preLoaderRoute: typeof AppDriversRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/settings/profile/$userId': {
      id: '/_app/settings/profile/$userId'
      path: '/settings/profile/$userId'
      fullPath: '/settings/profile/$userId'
      preLoaderRoute: typeof AppSettingsProfileUserIdRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppDashboardRoute: typeof AppDashboardRoute
  AppDriversRoute: typeof AppDriversRoute
  AppMapsRoute: typeof AppMapsRoute
  AppSettingsProfileUserIdRoute: typeof AppSettingsProfileUserIdRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppDashboardRoute: AppDashboardRoute,
  AppDriversRoute: AppDriversRoute,
  AppMapsRoute: AppMapsRoute,
  AppSettingsProfileUserIdRoute: AppSettingsProfileUserIdRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AuthLayoutRouteChildren {
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
